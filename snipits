{
  // Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Print to console": {
    "prefix": "inc",
    "body": [
      "#include<bits/stdc++.h>",
      "using namespace std;",
      "#define   ss ' ' ",
      "#define   ll long long int",
      "#define   gcd(a,b)   __gcd(a,b)",
      "#define   lcm(a,b)   (a*b)/gcd(a,b)",
      "#define   fast() ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL)",
      "#define   max3(a,b,c) max(max(a,b),c)",
      "#define   min3(a,b,c) min(min(a,b),c)",
      "#define   pb push_back",
      "#define   all(v) v.begin(),v.end()",
      "#define   allr(v) v.rbegin(),v.rend()",
      "#define   endl '\\n' ",
      "#define   pi 3.141592653589793",
      "#define   inf 1e9+10",
      "#define   case() cout << \"Case \" << cs++ << \": \" ",
      "vector<pair<int, int>> h_movements = {{2, 1}, {2, -1}, {1, 2}, {1, -2}, {-1, 2}, {-1, -2}, {-2, 1}, {-2, -1}};",
      "vector<pair<int, int>> movements = {{1,0}, {-1,0}, {0,1}, {0, -1}};",
      "vector<pair<int, int>> d_movements = {{1,0}, {-1,0}, {0,1}, {0, -1},{1,1}, {-1,1}, {-1,-1}, {1, -1} };",
      "ll n,m;",
      "bool chk_coor(ll i,ll j){",
      "   if(i<0 || j<0 || i>=n || j>=m)",
      "   {",
      "       return false;",
      "   }",
      "   return true;",
      "}",
      "ll cs = 1;",
      "const int N = 2e5 + 10;",
      "const int M = 1e9+7;",
      "int main()",
      "{",
      "  $0",
      "return 0;",
      "}"
    ],
    "description": "Log output to console"
  },
  "Print to console 2": {
    "prefix": "incd",
    "body": [
      "/*",

      "███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████",
      "███████████████████████████████████████            ████             ████   ███████   ██████████████████████████████████████████",
      "████████████████████████████████████████████████   ████   ███████   ████   ███████   ██████████████████████████████████████████",
      "████████████████████████████████████████████████   ████   ███████   ████   ███████   ██████████████████████████████████████████",
      "████████████████████████████████████████████████   ████   ███████   ████             ██████████████████████████████████████████",
      "███████████████████████████████████████  ███████   ████   ███████   █████████   ███████████████████████████████████████████████",
      "███████████████████████████████████████  ███████   ████   ███████   █████████   ███████████████████████████████████████████████",
      "███████████████████████████████████████            ████             █████████   ███████████████████████████████████████████████",
      "███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████",
      "███████████████████████            ████   █████████   ████             ████            ████             ███████████████████████",
      "███████████████████████   █████████████   █████████   ████   ███████   ████   █████████████   █████████████████████████████████",
      "███████████████████████   █████████████   █████████   ████   ███████   ████   █████████████   █████████████████████████████████",
      "███████████████████████            ████               ████             ████           █████            ████████████████████████",
      "████████████████████████████████   ████   █████████   ████   █████   ██████   █████████████   █████████████████████████████████",
      "████████████████████████████████   ████   █████████   ████   ██████   █████   █████████████   █████████████████████████████████",
      "███████████████████████            ████   █████████   ████   ███████   ████            ████             ███████████████████████",
      "███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████",
      "███████████   █████   ████             ████   ████            ████   ████████   ████      ██████   ████              ██████████",
      "███████████   ████   █████   ███████   ████   ████   █████████████   ████████   ████   █   █████   ████   ████████   ██████████",
      "███████████   ███   ██████   ███████   ████   ████   █████████████   ████████   ████   ██   ████   ████   ████████   ██████████",
      "███████████        ███████             ████   ████            ████              ████   ███   ███   ████              ██████████",
      "███████████   ███   ██████   ████   ███████   █████████████   ████   ████████   ████   ████   ██   ████   ████████   ██████████",
      "███████████   ████   █████   ██████   █████   █████████████   ████   ████████   ████   █████   █   ████   ████████   ██████████",
      "███████████   █████   ████   ███████   ████   ████            ████   ████████   ████   ██████      ████   ████████   ██████████",
      "███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████",
      "█████              ████             ████   █████████   ████   ████             ████   ████               ████             █████",
      "█████   ████████   ████   ████████  ████   █████████   ████   ██████████████   ████   ██████████   ██████████   ███████████████",
      "█████   ████████   ████   ████████  ████   █████████   ████   ██████████████   ████   ██████████   ██████████   ███████████████",
      "█████              ████             ████               ████   ██████████████   ████   ██████████   ██████████            ██████",
      "█████   ████████   ████   ████████  ████   █████████   ████   ████   ███████   ████   ██████████   ██████████   ███████████████",
      "█████   ████████   ████   ████████  ████   █████████   ████   ████   ███████   ████   ██████████   ██████████   ███████████████",
      "█████   ████████   ████             ████   █████████   ████   ████             ████   ██████████   ██████████             █████",
      "███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████",

      "*/",
      "#include<bits/stdc++.h>",
      "using namespace std;",
      "#define   ll long long int",
      "#define   gcd(a,b)   __gcd(a,b)",
      "#define   lcm(a,b)   (a*b)/gcd(a,b)",
      "#define   ss ' ' ",
      "#define   fast() ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL)",
      "#define   max3(a,b,c) max(max(a,b),c)",
      "#define   min3(a,b,c) min(min(a,b),c)",
      "#define   pb push_back",
      "#define   all(v) v.begin(),v.end()",
      "#define   allr(v) v.rbegin(),v.rend()",
      "#define   endl '\\n' ",
      "#define   pi 3.141592653589793",
      "#define   inf 1e9+10",
      "#define   case() cout << \"Case \" << cs++ << \": \" ",
      "vector<pair<int, int>> h_movements = {{2, 1}, {2, -1}, {1, 2}, {1, -2}, {-1, 2}, {-1, -2}, {-2, 1}, {-2, -1}};",
      "vector<pair<int, int>> movements = {{1,0}, {-1,0}, {0,1}, {0, -1}};",
      "vector<pair<int, int>> d_movements = {{1,0}, {-1,0}, {0,1}, {0, -1},{1,1}, {-1,1}, {-1,-1}, {1, -1} };",
      "ll n,m;",
      "bool chk_coor(ll i,ll j){",
      "   if(i<0 || j<0 || i>=n || j>=m)",
      "   {",
      "       return false;",
      "   }",
      "   return true;",
      "}",
      "ll cs = 1;",
      "const int N = 2e5 + 10;",
      "const int M = 1e9+7;",
      "int main()",
      "{",
      "  $0",
      "return 0;",
      "}"
    ],
    "description": "Log output to console"
  }
}
